name: Build
on:
  workflow_dispatch:
    inputs:
      task:
        description: "Build binary for aarch64"
        required: true
        type: boolean

jobs:
  Build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Replace software sources with the latest
      run: |
        # 删除原有的软件源
        sudo rm -f /etc/apt/sources.list

        # 添加最新的 Ubuntu 24.04 (Noble Numbat) 官方软件源
        echo "deb http://archive.ubuntu.com/ubuntu/ jammy main restricted universe multiverse" | sudo tee /etc/apt/sources.list
        echo "deb http://archive.ubuntu.com/ubuntu/ jammy-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
        echo "deb http://archive.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
        echo "deb http://archive.ubuntu.com/ubuntu/ jammy-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list

        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        echo "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-19 main" | sudo tee /etc/apt/sources.list.d/llvm-toolchain.list

    - name: Add Ubuntu GPG key
      run: |
        # 添加 Ubuntu 官方 GPG 密钥
        curl -fsSL http://archive.ubuntu.com/ubuntu/project/ubuntu-archive-keyring.gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/ubuntu.gpg

    - name: Check llvm
      run: |
        sudo apt-get update
        apt-cache search llvm
        
    - name: Set up LLVM APT repository
      run: |
        # wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        # echo "deb http://apt.llvm.org/$(lsb_release -cs)/llvm-toolchain-$(lsb_release -cs)-$(date +%Y%m)/ main" | sudo tee /etc/apt/sources.list.d/llvm-toolchain.list
        # clang-19 llvm-19 llvm-19-tools llvm-19-runtime llvm-19-examples llvm-19-linker-tools llvm-19-dev
        sudo apt-get install musl-tools musl musl-dev build-essential pkg-config cmake libssl-dev zlib1g-dev libsqlite3-dev protobuf-compiler libffi7 libc6-dev-arm64-cross gcc-multilib
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 19 all
        
    - name: Setup environment
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o rustup-init.sh
        chmod 777 rustup-init.sh
        ./rustup-init.sh --help
        bash rustup-init.sh -y --default-toolchain nightly
        rustup target add aarch64-unknown-linux-musl --toolchain=nightly
        
    - name: Check compiler
      run: |
        # clang -v
        # clang-19 -v
        # llvm-ar-19 --version

    - name: Build
      run: |
        export CC_aarch64_unknown_linux_musl=clang-19
        export AR_aarch64_unknown_linux_musl=llvm-ar-19
        # export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_RUSTFLAGS="-Clink-self-contained=yes -Clinker=rust-lld"

        mv Cargo.toml.bak Cargo.toml
        mv Cargo.lock.bak Cargo.lock
        rm /home/runner/.cargo/bin/rust-analyzer
        rm /home/runner/.cargo/bin/rustfmt
        rm /home/runner/.cargo/bin/cargo-fmt
        cargo clean
        cargo add decimal
        rustup update
        export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=ld.lld-19
        export CC=clang-19
        export CXX=clang++-19
        CC=clang-19 cargo build --target aarch64-unknown-linux-musl --release

    - name: Check info
      run: |
        ls -ltrah
        ls -ltrah target/aarch64-unknown-linux-musl/release/
        tree

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        path: target/aarch64-unknown-linux-musl/release/ion

    
    
   
