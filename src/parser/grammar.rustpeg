use parser::{pipelines, ArgumentSplitter};
use parser::peg::get_function_args;
use shell::flow_control::*;

#[pub]
parse_ -> Statement
      = for_
      / fn_
      / match_
      / case_
      / pipelines

#[pub]
fn_ -> Statement
    = "fn " n:_name whitespace* args:_fn_args whitespace* description:_description? {?
        get_function_args(args).map(|args| Statement::Function {
            description: description.unwrap_or("".into()),
            name: n.into(),
            args: args,
            statements: Vec::new(),
        }).ok_or("ion: invalid function argument\n")
    }

_description -> String
      = "--" whitespace* description:$([^\r\n]*) { description.into() }

_name -> String
      = n:$([A-z0-9_]+) { n.into() }

_fn_args -> Vec<String>
    = _fn_arg ** " "

_args -> Vec<String>
      = _arg ** " "

_arg -> String
     = n:$([A-z0-9_]+) { n.into() }

_fn_arg -> String
    = n:$([A-z0-9_:]+) { n.into()}

#[pub]
for_ -> Statement
    = "for" whitespace+ n:_name whitespace+ "in" whitespace+ expr:$(.*) {
        Statement::For {
            variable: n.into(),
            values: ArgumentSplitter::new(expr).map(String::from).collect(),
            statements: Vec::new(),
        }
    }

wildcard_ -> Option<String> = "_" { None }
value_ -> Option<String> = contents:$(.*) { Some(contents.into())}

pattern_ -> Option<String> = wildcard_ / value_

case_ -> Statement
    = "case" whitespace+ p:pattern_ {
    Statement::Case(Case { value: p, statements: Vec::new() })
  }

#[pub]
match_ -> Statement = "match" whitespace+ expression:$(.*) {
  Statement::Match {
    expression: expression.into(),
    cases: Vec::new()
  }
}

pub pipelines -> Statement
    = (unused* newline)* [#] .* { Statement::Default }
    / [ \n\t\r]* pipeline:_pipelines { pipeline }
    / (unused*) ** newline { Statement::Default }


// Converts the pipeline string into a statement, handling redirection, piping, and backgrounds.
_pipelines -> Statement
    = command:$(.+) {?
    pipelines::Collector::run(command).map(Statement::Pipeline)
}

unused -> ()
    = whitespace comment? { () }
    / comment { () }

comment -> ()
    = [#] [^\r\n]*

whitespace -> ()
    = [ \t]+

job_ending -> ()
    = [;]
    / newline

newline -> ()
    = [\r\n]
